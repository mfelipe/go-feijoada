services:
  schema-repository:
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfile_schema-repository
    ports:
      - "8080:8080"
    environment:
      - SR_REPOSITORY_REDIS_ADDRESS=redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - feijoada-network

  kafka-consumer:
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfile_kafka-consumer
    environment:
      - KC_REPOSITORY_REDIS_ADDRESS=redis:6379
      - KC_KAFKA_BROKERS=kafka:9092
      - KC_KAFKA_TOPICS=test-topic-1,test-topic-2
      - KC_KAFKA_GROUP=feijoada-group
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - feijoada-network

  kafka:
    container_name: feijoada-kafka
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - feijoada-network
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      start_period: 15s
      interval: 10s

  init-kafka:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_started
    networks:
      - feijoada-network
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      " 
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      echo 'Creating Kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic test-topic-1 --replication-factor 1 --partitions 10
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic test-topic-2 --replication-factor 1 --partitions 100
      echo 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  redis:
    container_name: feijoada-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - feijoada-network
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 1s
      retries: 10

  # Uncomment to use Valkey instead of Redis
  # valkey:
  #    container_name: feijoada-valkey
  #   image: valkeyio/valkey:7.2.0-alpine
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - feijoada-network
  #   volumes:
  #     - valkey-data:/data
  #   command: valkey-server --appendonly yes

networks:
  feijoada-network:
    driver: bridge

volumes:
  redis-data:
  # valkey-data: