// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dynamo

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

type mockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClient) EXPECT() *mockClient_Expecter {
	return &mockClient_Expecter{mock: &_m.Mock}
}

// BatchWriteItem provides a mock function for the type mockClient
func (_mock *mockClient) BatchWriteItem(ctx context.Context, params *dynamodb.BatchWriteItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for BatchWriteItem")
	}

	var r0 *dynamodb.BatchWriteItemOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) *dynamodb.BatchWriteItemOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchWriteItemOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockClient_BatchWriteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchWriteItem'
type mockClient_BatchWriteItem_Call struct {
	*mock.Call
}

// BatchWriteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - params *dynamodb.BatchWriteItemInput
//   - optFns ...func(*dynamodb.Options)
func (_e *mockClient_Expecter) BatchWriteItem(ctx interface{}, params interface{}, optFns ...interface{}) *mockClient_BatchWriteItem_Call {
	return &mockClient_BatchWriteItem_Call{Call: _e.mock.On("BatchWriteItem",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *mockClient_BatchWriteItem_Call) Run(run func(ctx context.Context, params *dynamodb.BatchWriteItemInput, optFns ...func(*dynamodb.Options))) *mockClient_BatchWriteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynamodb.BatchWriteItemInput
		if args[1] != nil {
			arg1 = args[1].(*dynamodb.BatchWriteItemInput)
		}
		var arg2 []func(*dynamodb.Options)
		var variadicArgs []func(*dynamodb.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*dynamodb.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockClient_BatchWriteItem_Call) Return(batchWriteItemOutput *dynamodb.BatchWriteItemOutput, err error) *mockClient_BatchWriteItem_Call {
	_c.Call.Return(batchWriteItemOutput, err)
	return _c
}

func (_c *mockClient_BatchWriteItem_Call) RunAndReturn(run func(ctx context.Context, params *dynamodb.BatchWriteItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error)) *mockClient_BatchWriteItem_Call {
	_c.Call.Return(run)
	return _c
}
