// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package redis

import (
	"context"

	"github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

type mockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClient) EXPECT() *mockClient_Expecter {
	return &mockClient_Expecter{mock: &_m.Mock}
}

// XAck provides a mock function for the type mockClient
func (_mock *mockClient) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, stream, group, ids)
	} else {
		tmpRet = _mock.Called(ctx, stream, group)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for XAck")
	}

	var r0 *redis.IntCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) *redis.IntCmd); ok {
		r0 = returnFunc(ctx, stream, group, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}
	return r0
}

// mockClient_XAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAck'
type mockClient_XAck_Call struct {
	*mock.Call
}

// XAck is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - ids ...string
func (_e *mockClient_Expecter) XAck(ctx interface{}, stream interface{}, group interface{}, ids ...interface{}) *mockClient_XAck_Call {
	return &mockClient_XAck_Call{Call: _e.mock.On("XAck",
		append([]interface{}{ctx, stream, group}, ids...)...)}
}

func (_c *mockClient_XAck_Call) Run(run func(ctx context.Context, stream string, group string, ids ...string)) *mockClient_XAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *mockClient_XAck_Call) Return(intCmd *redis.IntCmd) *mockClient_XAck_Call {
	_c.Call.Return(intCmd)
	return _c
}

func (_c *mockClient_XAck_Call) RunAndReturn(run func(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd) *mockClient_XAck_Call {
	_c.Call.Return(run)
	return _c
}

// XAdd provides a mock function for the type mockClient
func (_mock *mockClient) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	ret := _mock.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XAdd")
	}

	var r0 *redis.StringCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, *redis.XAddArgs) *redis.StringCmd); ok {
		r0 = returnFunc(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}
	return r0
}

// mockClient_XAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAdd'
type mockClient_XAdd_Call struct {
	*mock.Call
}

// XAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XAddArgs
func (_e *mockClient_Expecter) XAdd(ctx interface{}, a interface{}) *mockClient_XAdd_Call {
	return &mockClient_XAdd_Call{Call: _e.mock.On("XAdd", ctx, a)}
}

func (_c *mockClient_XAdd_Call) Run(run func(ctx context.Context, a *redis.XAddArgs)) *mockClient_XAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *redis.XAddArgs
		if args[1] != nil {
			arg1 = args[1].(*redis.XAddArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockClient_XAdd_Call) Return(stringCmd *redis.StringCmd) *mockClient_XAdd_Call {
	_c.Call.Return(stringCmd)
	return _c
}

func (_c *mockClient_XAdd_Call) RunAndReturn(run func(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd) *mockClient_XAdd_Call {
	_c.Call.Return(run)
	return _c
}

// XDel provides a mock function for the type mockClient
func (_mock *mockClient) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	var tmpRet mock.Arguments
	if len(ids) > 0 {
		tmpRet = _mock.Called(ctx, stream, ids)
	} else {
		tmpRet = _mock.Called(ctx, stream)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for XDel")
	}

	var r0 *redis.IntCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = returnFunc(ctx, stream, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}
	return r0
}

// mockClient_XDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XDel'
type mockClient_XDel_Call struct {
	*mock.Call
}

// XDel is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - ids ...string
func (_e *mockClient_Expecter) XDel(ctx interface{}, stream interface{}, ids ...interface{}) *mockClient_XDel_Call {
	return &mockClient_XDel_Call{Call: _e.mock.On("XDel",
		append([]interface{}{ctx, stream}, ids...)...)}
}

func (_c *mockClient_XDel_Call) Run(run func(ctx context.Context, stream string, ids ...string)) *mockClient_XDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockClient_XDel_Call) Return(intCmd *redis.IntCmd) *mockClient_XDel_Call {
	_c.Call.Return(intCmd)
	return _c
}

func (_c *mockClient_XDel_Call) RunAndReturn(run func(ctx context.Context, stream string, ids ...string) *redis.IntCmd) *mockClient_XDel_Call {
	_c.Call.Return(run)
	return _c
}

// XReadGroup provides a mock function for the type mockClient
func (_mock *mockClient) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	ret := _mock.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for XReadGroup")
	}

	var r0 *redis.XStreamSliceCmd
	if returnFunc, ok := ret.Get(0).(func(context.Context, *redis.XReadGroupArgs) *redis.XStreamSliceCmd); ok {
		r0 = returnFunc(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XStreamSliceCmd)
		}
	}
	return r0
}

// mockClient_XReadGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadGroup'
type mockClient_XReadGroup_Call struct {
	*mock.Call
}

// XReadGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XReadGroupArgs
func (_e *mockClient_Expecter) XReadGroup(ctx interface{}, a interface{}) *mockClient_XReadGroup_Call {
	return &mockClient_XReadGroup_Call{Call: _e.mock.On("XReadGroup", ctx, a)}
}

func (_c *mockClient_XReadGroup_Call) Run(run func(ctx context.Context, a *redis.XReadGroupArgs)) *mockClient_XReadGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *redis.XReadGroupArgs
		if args[1] != nil {
			arg1 = args[1].(*redis.XReadGroupArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockClient_XReadGroup_Call) Return(xStreamSliceCmd *redis.XStreamSliceCmd) *mockClient_XReadGroup_Call {
	_c.Call.Return(xStreamSliceCmd)
	return _c
}

func (_c *mockClient_XReadGroup_Call) RunAndReturn(run func(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd) *mockClient_XReadGroup_Call {
	_c.Call.Return(run)
	return _c
}
